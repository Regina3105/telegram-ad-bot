import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ConversationHandler, MessageHandler, filters, ContextTypes

BOT_TOKEN = "7588445095:AAFbowVOxKispj00FfKmBKrKRfQxQTKyt44"
ADMIN_CHAT_ID = 672260476

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

(
    CHOOSING_CHANNEL,
    ASK_FULL_NAME,
    ASK_ACTIVITY,
    ASK_INN,
    ASK_OGRN,
    ASK_DATE,
    ASK_CREATIVE,
) = range(7)

user_data_store = {}

keyboard = [
    [InlineKeyboardButton("–ö–∏—Ç –¥–ª—è —É–º–∞ ‚Äì 1000/24—á", callback_data="cleverchinese_24")],
    [InlineKeyboardButton("–ö–∏—Ç –¥–ª—è —É–º–∞ ‚Äì 1600/48—á", callback_data="cleverchinese_48")],
    [InlineKeyboardButton("–ö–∏—Ç –¥–ª—è —É–º–∞ ‚Äì 2600/–Ω–µ–¥–µ–ª—è", callback_data="cleverchinese_week")],
    [InlineKeyboardButton("Explore China ‚Äì 800/24—á", callback_data="explorezhongguo_24")],
    [InlineKeyboardButton("Explore China ‚Äì 1300/48—á", callback_data="explorezhongguo_48")],
    [InlineKeyboardButton("Explore China ‚Äì 2000/–Ω–µ–¥–µ–ª—è", callback_data="explorezhongguo_week")],
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ä–µ–∫–ª–∞–º—ã:", reply_markup=InlineKeyboardMarkup(keyboard))
    return CHOOSING_CHANNEL

async def choose_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_data_store[query.from_user.id] = {"channel_option": query.data}
    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    return ASK_FULL_NAME

async def ask_full_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_store[update.message.from_user.id]["full_name"] = update.message.text
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: –°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π, –ò–ü, –û–û–û")
    return ASK_ACTIVITY

async def ask_activity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    activity = update.message.text
    user_data_store[update.message.from_user.id]["activity"] = activity
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ù–ù:")
    return ASK_INN

async def ask_inn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_store[update.message.from_user.id]["inn"] = update.message.text
    activity = user_data_store[update.message.from_user.id]["activity"]
    if activity == "–ò–ü":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –û–ì–†–ù–ò–ü:")
    elif activity == "–û–û–û":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –û–ì–†–ù:")
    else:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–∫–ª–∞–º—ã:")
        return ASK_DATE
    return ASK_OGRN

async def ask_ogrn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_store[update.message.from_user.id]["ogrn"] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–∫–ª–∞–º—ã:")
    return ASK_DATE

async def ask_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_store[update.message.from_user.id]["date"] = update.message.text
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∫—Ä–µ–∞—Ç–∏–≤–∞:")
    return ASK_CREATIVE

async def ask_creative(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = user_data_store[update.message.from_user.id]
    user_data["creative"] = update.message.text if update.message.text else "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"

    message = (
        f"üì¢ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É:"
        f"üë§ –§–ò–û: {user_data['full_name']}"
        f"üì¶ –ö–∞–Ω–∞–ª –∏ —Ñ–æ—Ä–º–∞—Ç: {user_data['channel_option']}"
        f"üíº –î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {user_data['activity']}"
        f"üßæ –ò–ù–ù: {user_data['inn']}"
    )
    if "ogrn" in user_data:
        message += f"üìÑ {'–û–ì–†–ù–ò–ü' if user_data['activity'] == '–ò–ü' else '–û–ì–†–ù'}: {user_data['ogrn']}"
    message += f"üóì –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ä–µ–∫–ª–∞–º—ã: {user_data['date']}"
    message += f"üìù –ö—Ä–µ–∞—Ç–∏–≤: {user_data['creative']}"

    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message)
    await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING_CHANNEL: [CallbackQueryHandler(choose_channel)],
            ASK_FULL_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_full_name)],
            ASK_ACTIVITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_activity)],
            ASK_INN: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_inn)],
            ASK_OGRN: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_ogrn)],
            ASK_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_date)],
            ASK_CREATIVE: [MessageHandler(filters.ALL, ask_creative)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()