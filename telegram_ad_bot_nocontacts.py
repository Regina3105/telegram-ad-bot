import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ConversationHandler, CallbackQueryHandler, ContextTypes
)

BOT_TOKEN = '7588445095:AAFbowVOxKispj00FfKmBKrKRfQxQTKyt44'
ADMIN_CHAT_ID = 672260476  # 

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

(
    CHOOSING_PACKAGE,
    GET_FULLNAME,
    GET_ACTIVITY,
    GET_INN,
    GET_OGRN,
    GET_DATETIME,
    GET_CREATIVE,
    ADMIN_REPLY
) = range(8)

user_data_dict = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ö–∏—Ç –¥–ª—è —É–º–∞ üß†", callback_data='clever')],
        [InlineKeyboardButton("Explore China üèØ", callback_data='explore')]
    ]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CHOOSING_PACKAGE

async def package_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    package = query.data
    user_data_dict[query.from_user.id] = {'package': package}
    await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    return GET_FULLNAME

async def get_fullname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_dict[update.message.from_user.id]['fullname'] = update.message.text
    buttons = [["–°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π", "–ò–ü", "–û–û–û"]]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:",
        reply_markup=ReplyKeyboardMarkup(buttons, one_time_keyboard=True, resize_keyboard=True)
    )
    return GET_ACTIVITY

async def get_activity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = user_data_dict[update.message.from_user.id]
    user_data['activity'] = update.message.text
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ù–ù:")
    return GET_INN

async def get_inn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = user_data_dict[update.message.from_user.id]
    user_data['inn'] = update.message.text
    if user_data['activity'] == "–°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ä–µ–∫–ª–∞–º—ã:")
        return GET_DATETIME
    else:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –û–ì–†–ù/–û–ì–†–ù–ò–ü:")
        return GET_OGRN

async def get_ogrn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_dict[update.message.from_user.id]['ogrn'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ä–µ–∫–ª–∞–º—ã:")
    return GET_DATETIME

async def get_datetime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_dict[update.message.from_user.id]['datetime'] = update.message.text
    await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ä–µ–∫–ª–∞–º–Ω—ã–π –∫—Ä–µ–∞—Ç–∏–≤ (—Ç–µ–∫—Å—Ç):")
    return GET_CREATIVE

async def get_creative(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = user_data_dict[update.message.from_user.id]
    user_data['creative'] = update.message.text

    message = f"üì¢ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É:\n"               f"üîπ –ü–∞–∫–µ—Ç: {user_data['package']}\n"               f"üë§ –§–ò–û: {user_data['fullname']}\n"               f"üè∑Ô∏è –¢–∏–ø: {user_data['activity']}\n"               f"üÜî –ò–ù–ù: {user_data['inn']}\n"

    if 'ogrn' in user_data:
        message += f"üìÑ {'–û–ì–†–ù–ò–ü' if user_data['activity'] == '–ò–ü' else '–û–ì–†–ù'}: {user_data['ogrn']}\n"

    message += f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {user_data['datetime']}\n"                f"üì£ –ö—Ä–µ–∞—Ç–∏–≤: {user_data['creative']}"

    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

async def startup_notify(application):
    await application.bot.send_message(chat_id=ADMIN_CHAT_ID, text="‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING_PACKAGE: [CallbackQueryHandler(package_chosen)],
            GET_FULLNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_fullname)],
            GET_ACTIVITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_activity)],
            GET_INN: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_inn)],
            GET_OGRN: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_ogrn)],
            GET_DATETIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_datetime)],
            GET_CREATIVE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_creative)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_message=True
    )

    app.add_handler(conv_handler)
    app.run_polling(after_startup=startup_notify)